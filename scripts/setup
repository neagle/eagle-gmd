#!/bin/bash

# Get color variables
source "${BASH_SOURCE%/*}/_colors"

# Install project githooks
HOOKS_DIR="./scripts/_hooks"
GIT_HOOKS_DIR="./.git/hooks"

# Loop over the files in HOOKS_DIR
for hook in $HOOKS_DIR/*; do
	# Get the filename
	hook_name=$(basename $hook)

	# Destination path for the symlink
	dest="$GIT_HOOKS_DIR/$hook_name"

	# Create the symlink if it doesn't already exist
	if [ ! -e "$dest" ]; then
		_display "Symlinking $hook_name githook..."
		ln -s "../../scripts/_hooks/$hook_name" "$dest"
		chmod +x "$dest"
	fi
done

PROJECT_NAMESPACE="gmdata"

## Meet the various prerequisites
prerequisites="true"
mustBeSet() {
	v=$1
	if [ -z "${!v}" ]; then
		_display "${v} must be set." $YELLOW
		prerequisites="false"
	fi
}
mustHaveProgram() {
	p=$1
	if ! [ -x "$(command -v $p)" ]; then
		_display "${p} must be installed and in the path." $YELLOW
		prerequisites="false"
	fi
}

# Delete secrets nicely so that we don't get errors if they don't exist
_delete_secret() {
	if kubectl get secret $1 -n $PROJECT_NAMESPACE &>/dev/null; then
		_display "Resetting existing secret: $1..."
		kubectl delete secret $1 -n $PROJECT_NAMESPACE
	fi
}

## Meet the prerequisites before going in and changing anything
mustBeSet "GREYMATTER_REGISTRY"
mustBeSet "GREYMATTER_REGISTRY_USERNAME"
mustBeSet "GREYMATTER_REGISTRY_PASSWORD"
mustHaveProgram kubectl
mustHaveProgram ssh-keyscan

## Make the new cluster in the target namespace. Avoid 6999 and 443 port conflicts
if [ "$prerequisites" != "true" ]; then
	_display "Prerequisites not met. Exiting." $RED
	exit 1
fi

PRIVATE_KEY=${PRIVATE_KEY:-$(echo ~/).ssh/id_rsa}
# Check if the file exists and is a regular file. If not, exit with an error message.
if [[ ! -f $PRIVATE_KEY ]]; then
	_display "The private key file $PRIVATE_KEY does not exist. Please provide a valid path via the PRIVATE_KEY environment variable if you have a private key with a different name or at a different location." $RED
	exit 1
fi
_display "PRIVATE_KEY" $PRIVATE_KEY

_display "Creating namespaces..."

kubectl create namespace $PROJECT_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

# operator namespace setup
kubectl create namespace gm-operator --dry-run=client -o yaml | kubectl apply -f -

_display "Creating secrets..."

_delete_secret "greymatter-image-pull"
kubectl create secret docker-registry greymatter-image-pull \
	--docker-server="$GREYMATTER_REGISTRY" \
	--docker-username="$GREYMATTER_REGISTRY_USERNAME" \
	--docker-password="$GREYMATTER_REGISTRY_PASSWORD" \
	--docker-email="$GREYMATTER_REGISTRY_USERNAME" \
	-n $PROJECT_NAMESPACE

# Create the ingress secret
_delete_secret greymatter-edge-ingress
kubectl create secret generic greymatter-edge-ingress \
	--from-file=ca.crt=./certs/gmdata_ca_cert.pem \
	--from-file=server.crt=./certs/gmdata_edge_cert.pem \
	--from-file=server.key=./certs/gmdata_edge_key.pem \
	-n $PROJECT_NAMESPACE

# discard output to stderr
known_hosts=$(ssh-keyscan github.com 2>/dev/null)

_delete_secret "greymatter-admin-sync"
kubectl create secret generic greymatter-admin-sync \
	--from-file=ssh-private-key=$PRIVATE_KEY \
	--from-literal=known_hosts="$known_hosts" \
	-n $PROJECT_NAMESPACE

_delete_secret "greymatter-core-repo"
kubectl create secret generic greymatter-core-repo \
	--from-file=ssh-private-key=$PRIVATE_KEY \
	--from-literal=known_hosts="$known_hosts" \
	-n $PROJECT_NAMESPACE

_delete_secret "sync-ssh-passphrase"
kubectl create secret generic sync-ssh-passphrase --from-literal=passphrase="$SSH_PASSPHRASE" -n $PROJECT_NAMESPACE

_display "Applying k8s..."

# apply all yaml files in k8s recursively
find ./k8s -name \*.yaml -exec kubectl apply -f {} \;
