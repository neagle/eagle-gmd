#!/bin/bash

# Get color variables
source "${BASH_SOURCE%/*}/_colors"

PROJECT_NAMESPACE="gmdata"

# Delete secrets nicely so that we don't get errors if they don't exist
_delete_secret() {
	if kubectl get secret $1 -n $PROJECT_NAMESPACE &>/dev/null; then
		echo "Resetting existing secret: $1..."
		kubectl delete secret $1 -n $PROJECT_NAMESPACE
	fi
}

PRIVATE_KEY=${PRIVATE_KEY:-$(echo ~/).ssh/id_rsa}
_display "PRIVATE_KEY" $PRIVATE_KEY

_display "Creating namespaces..."

kubectl create namespace $PROJECT_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

# operator namespace setup
kubectl create namespace gm-operator --dry-run=client -o yaml | kubectl apply -f -

_display "Creating secrets..."

_delete_secret "greymatter-image-pull"
kubectl create secret docker-registry greymatter-image-pull \
	--docker-server="$GREYMATTER_REGISTRY" \
	--docker-username="$GREYMATTER_REGISTRY_USERNAME" \
	--docker-password="$GREYMATTER_REGISTRY_PASSWORD" \
	--docker-email="$GREYMATTER_REGISTRY_USERNAME" \
	-n $PROJECT_NAMESPACE

_delete_secret "greymatter-admin-sync"

# discard output to stderr
known_hosts=$(ssh-keyscan github.com 2>/dev/null)

_delete_secret "greymatter-core-repo"
kubectl create secret generic greymatter-core-repo \
	--from-file=ssh-private-key=$PRIVATE_KEY \
	--from-literal=known_hosts="$known_hosts" \
	-n $PROJECT_NAMESPACE

_delete_secret "sync-ssh-passphrase"
kubectl create secret generic sync-ssh-passphrase --from-literal=passphrase="$SSH_PASSPHRASE" -n $PROJECT_NAMESPACE

_display "Applying k8s..."

# apply all yaml files in k8s recursively
find ./k8s -name \*.yaml -exec kubectl apply -f {} \;
